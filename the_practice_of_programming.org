#+title: The Practice of Programming (Pike & Kernighan)

** 1. Style
- programs are not only read by computers
  - your code should be readable for your colleagues and for you in the future
  - well written code is easier to understand and modify
  - poorly written code has more chances to have bugs
- how to write clear code
  - be idiomatic (follow conventions)
  - keep your logic straightforward
  - use descriptive names
  - use a consistent formatting
  - add helpful comments
  - don't try to be clever
  - be consistent and impose a convention (do equivalent things the same way to avoid confusion)
- the book is not a set of arbitrary rules, just some ideas to put in practice

*** 1.1. Names
- misleading names can cause bugs
  - names that hide side effects
  - names that wrongly describe what the function does
- don't always use long names, they not always bring value
  - do: ~for (int i = 0; ...)~
  - don't: ~for (int indexOfTheArray = 0; ...)~
- names should strive to 
  - have purpose
  - be concise
  - be memorable
  - be, if possible, pronounceable
  - follow conventions (like ~for (int i = 0; ...)~) 
  - avoid redundancy (use ~user.Load~ instead of ~user.LoadUser~)
- size
  - proportional to scope
  - global variables should have more descriptive names
  - variables with short scope can have a short name
- functions
  - name should be an action
  - if returns bool, should ideally be ~isSomething~ instead of ~checkSomething~

*** 1.2. Expressions and Statements
- avoid multiple expressions in a single line
  - break it in multiple lines to make it clearer
  - this is bad and potentially buggy:
  - ~int age = (ptr == NULL) ? 0 : (*(struct user*)ptr).age++;~
  - (there are better examples, just though of it)
- avoid crazy expressions inside for loop
- use parenthesis to make the intent clearer
  - in C you can cause undefined behavior in some scenarios
- be careful with ++ operator

*** 1.3. Consistency and Idioms
- follow the programming language idioms
  - if there is a common way of doing a specific thing, follow the standard
  - in Go, name your error as `err` when possible
  - every language has a common way of handling errors, reading files, and so on

*** 1.4. (C/C++) Function Macros
- macros can be dangerous
  - they can evaluate parameters more than once
  - not properly using parenthesis / braces can lead to bugs
- macros should be avoided when they are not required
- surround macro body with parentheesis or braces


*** 1.5. Magic Numbers
- examples
  - conversion factors
  - array sizes
  - ids for databases
- magic numbers must have names
- use enums instead of macros when possible
- in C you cannot use const for array size, so macro is needed
- representing 0 in C
  - use 0 for integers
  - use NULL for pointers
  - use '\0' for null byte
- use sizeof instead of manually writing the size
  - less error prone
  - sizes can vary by implementation
  
*** 1.6. Comments
- bad comments
  - tell you what the code already tells you
    - exception: documentation summarizing code
  - are more confusing than the code itself
  - are buggy (outdated with the code behavior)
  - are distracting
- good comments
  - tell you WHY the code is doing what its doing
  - gives you a larger scale view
  - explain non self-evident or subtle things
 - keep comments updated 

*** 1.7. Why Bother?
- suggested readings:
  - The Elements of Programming Style (Kernighan & Plauger)
  - Writing Solid Code (Steve Maguire)
  - Expert C Programming (Prentice Hall)

** 2. Algorithms and Data Structures

*** 2.0. - 2.4. Intro, Searching, Sorting, Libraries, Java Quicksort
- a good algorithm can solve problems that would take years in a few seconds
- most data structure in complex softwares are simple (arrays, lists, trees, maps)
- understand common algorithms to be able to choose
- code verbatim**?
- linear search: O(N) - proportional to data size
- binary search: bisect until you find it - O(log N)
- you can sort once and binary search multiple times if data is static
- quicksort was invented by C.A.R Hoare
- C: qsort, bsearch

*** 2.5. O-Notation
- used to compare running time and space requirements for algorithms
- is agnostic to CPU speed, language, architecture, disk speed, and so on
- big O expected vs big O worst case
- quicksort worst case is O(N^2) (when**?) and expected is O(N log N)
- big O's from lowest to largests:
  - O(1) - array index
  - O(log N) - binary search
  - O(N) - linear search
  - O(N log N) - quicksort, mergesort
  - O(N^2) - bubblesort
  - O(N^3) - TODO* add example
  - O(2^N) - TODO* add example

*** 2.6. Growing Arrays
- capacity = underlying array length
- length = dynamic array current used size
- when length hits capacity and you try to append
  - should allocate a new array and copy all items to it
  - ideally should grow the length in factors to amortize overhead
  - is ~realloc~ ISO C?
